# Python中通过赋值"="而产生的存储数据的容器称为变量，变量名只能由字母数字和下划线组成

# 数据按类型可分为可变类型和不可变类型，通过增删改等(非重新赋值)方式对变量进行修改而id不变的为可变型，id改变的为不可变型
# 不可变类型数据的变量只能通过重新赋值的方法来改变数据，可变类型除了重新赋值还可通过调用函数来改变数据

# 可变类型: 列表list、字典dict、集合set
# 不可变类型: 数字型num(整型int,浮点型float,复数complex)、布尔型bool、字符串str、元组tuple


# 逻辑运算符(not,and,or)
# ------------------------------------------------------
# 优先级:  () > not > and > or
# and:  两边都对返回右边的值，两边都错返回左边，一边错一边对就返回错的那边的值
# or :  从左往右执行，左边对了直接返回不执行右边，左边不对则执行并返回右边(无论对错)

# print(0 and False)
# print(1 and 2)
# print(False and 1)
# print(False or 0)
# print(1 or 2)
# print(0 or 1)


# ------------------------------------------------------
# 可变类型的方法不改变ID，若多个变量引用同一可变容器，一个变全部变(想不变需要浅复制或者深复制)
# ------------------------------------------------------
# a = [100, 54646, 121]
# print(a, id(a))
# a.append(666)
# print(a, id(a))
# a.clear()
# print(a, id(a))


# 通用操作运算符（+ *），判断句式（in，not in）
# ---------------------------------------------------------------------------
# + 用以合并变量，支持字符串、列表、元组，字典和集合会报错
# print('abc'+'123')
# print([1,2,3]+[4,6,5])
# print(('a','b','c')+('d','e','f'))

# * 用以复制变量，支持字符串、列表、元组，字典和集合会报错
# print('haha'*10)
# print([123]*10)
# print((111,)*10)

# in 判断元素是否存在,格式: 元素 in 变量 ,输出True或者False
# not in判断元素是否不存在,格式: 元素 not in 变量 ,输出True或者False
# 可搭配if，作为判断条件（if 元素 in 变量：....）
# print("a" in "aabbcc")
# print("a" not in "aabbcc")
# print(10 in [1,3,5,10,20,30])
# print(10 not in (1,3,5,10))
# print('name' in {'name':'boss','job':'teach'})              # 只判断键是否存在
# print('boss' in {'name':'boss','job':'teach'}.values())     # 用迭代器可查询值是否存在


#    通用函数
# ----------------------------------------
#   len()     计算容器中的元素个数
# print(len('abcde'))
# print(len([1,2,1,2,]))
# print(len({'age':15}))

# ----------------------------------------
#    del 或 del()   删除
#    格式: del 对象 或者 del(对象) ,可以删除整个对象,也可以通过下标或者键删除对象的元素
# li = [1,2,3,4,5]
# del li[2]
# print(li)
# del(li)
# print(li)   # 报错,因为变量已被删除,所以显示变量未定义
# dict_1 = {'name':'joly','age':'19','city':'北京'}
# del dict_1['age']
# print(dict_1)

# ----------------------------------------
#   max()             返回容器中的元素最大值
#   min()             返回容器中的元素最小值
#   注:只能比较纯字符串或纯数字的容器的元素，字符串比较时字母小于中文
# str1 = 'hdaoipdapzckopk'
# list1 = [1,5,7,9,50,100,300,]
# dict1 = {"job":"police","city":"chengdu","age":36}
# print(max(str1),max(list1),max(dict1))
# print(min(str1),min(list1),min(dict1))

# ----------------------------------------
#   range(start,end,step)   生成从strat到end的数字,步长为step,供for循环使用
# for i in range(10):             # 若从0开始，且步长为1，可只输一个参数
#     print(i)
# for i in range(0,10,2):         # 若要设置步长，则需要设置三个参数
#     print(i)

# ----------------------------------------
#   enumerate(可遍历对象，start=0)    函数用于将一个可遍历的数据对象组合为一个索引序列,同时列出数据和数据下标,一般用在for循环中
#   start参数用来设置遍历数据的下标的初始值，可不设置，默认值为0
#   enumerate（）的遍历返回一个元组tuple，包含两个元素，由内迭代对象下标和元素组成
# list1 = ['a','b','c','d','e','f','g','h']
# for i,j in enumerate(list1,1):
#     print(f'NO.{i}\t{j}')


# ---------------------------------------------------------------------------------------------------------

# 多元素的容器都可以拆包（包括字符串、列表、元组、字典、集合）                        # 拆包(解包)和交换变量值
# str1 = 'DJ'
# list1 = [1,2]
# tuple1 = (3,4)
# dict1 = {'age':11,'name':'Lisa'}
# set1 = {5,6}
# i,j = str1
# a,b = list1
# c,d = tuple1
# e,f = dict1
# g,h = set1
# print('',a,b,'\n',c,d,'\n',g,h,'\n',i,j)
# print(e,dict1[e],f,dict1[f])


# 交换两个变量的值的两个方法

# 方法一: 定义中间变量的方法，临时存储a或b的值
# a = 100
# b = 200
# print(f'交换前: a = {a}   b = {b}')
# c = a
# a = b
# b = c
# del c
# print(f'交换后: a = {a}   b = {b}')

# 方法二: 同时交换赋值
# c = 123
# d = 456
# c,d = d,c
# print(c,d)
