# -*-  codeing = utf-8 -*-
# @Time : 2021/6/7 4:41
# @Author : 漫天烟华
# @File : 生成器yield.py
# @Software : PyCharm


# 在 Python 中，使用了 yield 的函数被称为生成器（generator）
# 跟普通函数不同的是，生成器是一个返回迭代器的函数，只能用于迭代操作，生成器是可暂停的迭代器
# 在调用生成器运行的过程中，每次遇到 yield 时函数会暂停并保存当前所有的运行信息，返回yield的值, 并在下一次执行next()方法时从当前位置继续运行
# ----------------------------------------------------------------------------------------------------------------------
# def myGen():
#     print('生成器正在执行...')
#     yield 1
#     yield 2
# g = myGen()
# print(g)        # 直接打印返回的是生成器
# print(next(g))  # 迭代时返回yield后的值
# print(next(g))

# ----------------------------------------------
# 斐波那契数列生成器
# def fibs(n=10):
#     a, b, c = 0, 1, 0
#     while True:
#         yield a
#         a, b = b, a + b
#         c += 1
#         if c >= n:
#             break
# f = fibs()
# for i in f:
#     print(i)
# ----------------------------------------------------------------------------------------------------------------------
# m = (i for i in range(10))      # 用圆括号括起来的推导式其实是生成器推导式
# print(m)
# print(next(m))
# print(next(m))
# print('-'*20)
# for i in m:
#     print(i)
